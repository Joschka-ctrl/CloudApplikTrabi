name: Stage Cluster Creation

on:
  push:
    tags:
      - '1000.*' 

env:
  PROJECT_ID: trabantparking-stage
  GKE_CLUSTER: stage-cluster
  GKE_REGION: europe-west1
  TF_PLAN_BUCKET: trabantparking-stage-terraform-plans
  TF_PLAN_FILE: terraform.tfstate
  BUCKET_TF_STATE: trabantparking-stage-terraform-plans/terraform.tfstate

jobs:
  build-and-deploy:
    name: Deploy to GCP
    runs-on: ubuntu-latest

    steps:

    - name: Verify Ingress IP
      continue-on-error: true
      run: |
        echo "Waiting for ingress to be ready..."
        MAX_RETRIES=30  # Set the maximum number of retries (adjustable)
        RETRY_INTERVAL=20  # Interval between retries in seconds
        RETRIES=0
        while true; do
          # Versuche, die Ingress-IP abzurufen, und fange Fehler ab
          INGRESS_IP=$(kubectl get pi-gateway-ingress -n default -o jsonpath="{.items[0].status.loadBalancer.ingress[0].ip}" 2>/dev/null || echo "")


          if [ ! -z "$INGRESS_IP" ]; then
            echo "Ingress IP Address: $INGRESS_IP"
            echo "INGRESS_IP=$INGRESS_IP" >> $GITHUB_ENV
            break
          fi

          if [ $RETRIES -ge $MAX_RETRIES ]; then
            echo "Timed out waiting for ingress IP."
            exit 1
          fi

          RETRIES=$((RETRIES + 1))
          echo "Retry $RETRIES/$MAX_RETRIES: Ingress IP not ready yet. Retrying in $RETRY_INTERVAL seconds..."
          sleep $RETRY_INTERVAL
          done
    - name: Create DNS Subdomain Record for Tenant
      run: |
        echo "Creating DNS record for tenant ${TENANT_NAME}..."
        SUBDOMAIN="${TENANT_NAME}.trabantparking.ninja"
        gcloud dns record-sets transaction start --zone=default
        gcloud dns record-sets transaction add ${INGRESS_IP} \
          --name=${SUBDOMAIN} --ttl=5 --type=A --zone=default
        gcloud dns record-sets transaction execute --zone=default
      env:
        TENANT_NAME: ${{ secrets.TENANT_NAME }}

      
