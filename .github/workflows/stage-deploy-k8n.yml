name: Stage Cluster Creation

on:
  push:
    tags:
      - '0.*' 

env:
  PROJECT_ID: trabantparking-stage
  GKE_CLUSTER: stage-cluster
  GKE_REGION: europe-west1
  TF_PLAN_BUCKET: trabantparking-stage-terraform-plans
  TF_PLAN_FILE: terraform.tfstate
  BUCKET_TF_STATE: trabantparking-stage-terraform-plans/terraform.tfstate

jobs:
  deploy:
    name: Deploy to GCP
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Google Cloud SDK
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GOOGLE_CREDENTIALS_STAGE }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}

    - name: Install Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Configure Docker for GCP Artifact Registry
      run: |
        gcloud auth configure-docker europe-west1-docker.pkg.dev

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: "1.5.7"

    - name: Initialize Terraform
      run: |
        terraform init
      working-directory: cloud/terraform

    - name: Check if Cluster Exists
      id: check_cluster
      run: |
        if gcloud container clusters describe ${{ env.GKE_CLUSTER }} --region ${{ env.GKE_REGION }}; then
          echo "Cluster exists"
          echo "CLUSTER_EXISTS=true" >> $GITHUB_ENV
        else
          echo "Cluster does not exist"
          echo "CLUSTER_EXISTS=false" >> $GITHUB_ENV
        fi

    - name: Import Existing Cluster
      if: env.CLUSTER_EXISTS == 'true'
      run: |
        echo ${{ env.PROJECT_ID }}
        terraform import google_container_cluster.gke projects/${{ env.PROJECT_ID }}/locations/${{ env.GKE_REGION }}/clusters/${{ env.GKE_CLUSTER }}
      working-directory: cloud/terraform

    - name: Cluster Name
      run: |
        echo ${{ env.GKE_CLUSTER }}

    - name: Import Bucket
      run: |
        terraform import google_storage_bucket.default trabantparking-stage-terraform-plans
      working-directory: cloud/terraform  

    - name: Terraform Plan
      run: |
        terraform plan -var="cluster_name=${{ env.GKE_CLUSTER }}" -out=tfplan
        terraform show -json tfplan > plan.json
        gcloud storage cp tfplan gs://${{ env.TF_PLAN_BUCKET }}/${{ env.TF_PLAN_FILE }}
      working-directory: cloud/terraform


    - name: Terraform Apply
      run: |
          if [ -f "tfplan" ]; then
            terraform apply tfplan
          else
            terraform apply -auto-approve
          fi
      working-directory: cloud/terraform

    - name: Migrate Terraform State to Google Cloud Storage
      run: |
        terraform init -migrate-state

  deploy:
    name: Apply Helm Chart
    runs-on: ubuntu-latest

    steps:
    - name: Install GKE Auth Plugin
      run: |
        echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
        curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
        sudo apt-get update
        sudo apt-get install -y google-cloud-sdk-gke-gcloud-auth-plugin

    - name: Get GKE Credentials
      run: |
        gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} --region ${{ env.GKE_REGION }}

    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: 'v3.12.3'

    - name: Deploy Helm Chart
      run: |
        helm upgrade --install trabant-app ./cloud/yamls/helm-chart --namespace default --create-namespace

    - name: Verify Deployment
      run: |
        kubectl get pods -n trabi-app
        kubectl get services -n trabi-app
  
  deploy:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - name: Get the latest tag
        id: get_latest_tag
        run: |
          git fetch --tags
          LATEST_TAG=$(git describe --tags $(git rev-list --tags --max-count=1))   
          echo "LATEST_TAG=${LATEST_TAG}" >> $GITHUB_ENV

      - name: Get changed files
        id: changed-files
        run: |
          echo "::set-output name=frontend::$(git diff --name-only HEAD^ HEAD | grep ^frontend/ || true)"
          echo "::set-output name=backend::$(git diff --name-only HEAD^ HEAD | grep ^backend/ || true)"
          echo "::set-output name=backend_echarging::$(git diff --name-only HEAD^ HEAD | grep ^backend-echarging/ || true)"
          echo "::set-output name=backend_reporting::$(git diff --name-only HEAD^ HEAD | grep ^backend-reporting/ || true)"
          echo "::set-output name=backend_parking::$(git diff --name-only HEAD^ HEAD | grep ^backend-parking/ || true)"
        working-directory: microservices

      - name: Set up Google Cloud SDK
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GOOGLE_CREDENTIALS_STAGE }}'

      - name: Authenticate Docker with Google Cloud
        run: |
          gcloud auth configure-docker europe-west1-docker.pkg.dev

      # Frontend
      - name: Build and Push Frontend
        if: steps.changed-files.outputs.frontend != ''
        run: |
          docker build \
            --build-arg REACT_APP_BACKEND_URL=/api \
            --build-arg AUTH_API_KEY=${{ secrets.AUTH_API_KEY_STAGE }} \
            -t frontend-server:${{ env.LATEST_TAG }} \
            -f frontend/Dockerfile ./frontend
          docker tag frontend-server:${{ env.LATEST_TAG }} \
            europe-west1-docker.pkg.dev/trabantparking-stage/docker-repo/frontend-server:${{ env.LATEST_TAG }}
          docker push \
            europe-west1-docker.pkg.dev/trabantparking-stage/docker-repo/frontend-server:${{ env.LATEST_TAG }}
        working-directory: microservices

      # Backend
      - name: Build and Push Backend
        if: steps.changed-files.outputs.backend != ''
        run: |
          docker build \
            --build-arg BUCKET_ENV=_stage \
            -t backend-server:latest \
            -f backend/Dockerfile ./backend
          docker tag backend-server:latest \
            europe-west1-docker.pkg.dev/trabantparking-stage/docker-repo/backend-server:${{ env.LATEST_TAG }}
          docker push \
            europe-west1-docker.pkg.dev/trabantparking-stage/docker-repo/backend-server:${{ env.LATEST_TAG }}
        working-directory: microservices

      # Backend E-Charging
      - name: Build and Push Backend E-Charging
        if: steps.changed-files.outputs.backend_echarging != ''
        run: |
          docker build \
            --build-arg AUTH_API_KEY=${{ secrets.AUTH_API_KEY_STAGE }} \
            --build-arg PROJECT_ID=trabantparking-stage \
            -t backend-echarging-server:${{ env.LATEST_TAG }} \
            -f backend-echarging/Dockerfile ./backend-echarging
          docker tag backend-echarging-server:${{ env.LATEST_TAG }} \
            europe-west1-docker.pkg.dev/trabantparking-stage/docker-repo/backend-echarging-server:${{ env.LATEST_TAG }}
          docker push \
            europe-west1-docker.pkg.dev/trabantparking-stage/docker-repo/backend-echarging-server:${{ env.LATEST_TAG }}
        working-directory: microservices

      # Backend Reporting
      - name: Build and Push Backend Reporting
        if: steps.changed-files.outputs.backend_reporting != ''
        run: |
          docker build \
            --build-arg AUTH_API_KEY=${{ secrets.AUTH_API_KEY_STAGE }} \
            --build-arg PROJECT_ID=trabantparking-stage \
            -t backend-reporting-server:${{ env.LATEST_TAG }} \
            -f backend-reporting/Dockerfile ./backend-reporting
          docker tag backend-reporting-server:${{ env.LATEST_TAG }} \
            europe-west1-docker.pkg.dev/trabantparking-stage/docker-repo/backend-reporting-server:${{ env.LATEST_TAG }}
          docker push \
            europe-west1-docker.pkg.dev/trabantparking-stage/docker-repo/backend-reporting-server:${{ env.LATEST_TAG }}
        working-directory: microservices

      # Backend Parking
      - name: Build and Push Backend Parking
        if: steps.changed-files.outputs.backend_parking != ''
        run: |
          docker build \
            --build-arg AUTH_API_KEY=${{ secrets.AUTH_API_KEY_STAGE }} \
            --build-arg PROJECT_ID=trabantparking-stage \
            -t backend-parking-server:${{ env.LATEST_TAG }} \
            -f backend-parking/Dockerfile ./backend-parking
          docker tag backend-parking-server:${{ env.LATEST_TAG }} \
            europe-west1-docker.pkg.dev/trabantparking-stage/docker-repo/backend-parking-server:${{ env.LATEST_TAG }}
          docker push \
            europe-west1-docker.pkg.dev/trabantparking-stage/docker-repo/backend-parking-server:${{ env.LATEST_TAG }}
        working-directory: microservices