name: Full Cluster Creation

on:
  workflow_dispatch:
    inputs:
      tenant_name:
        description: "Tenant Name"
        required: true
        default: "default-cluster" 
      region:
        description: "Region"
        required: false
        default: "europe-west1" 
      zone: 
        description: "Zone"
        required: false
        default: "europe-west1-b" 

env:
  PROJECT_ID: trabantparking-stage
  GKE_CLUSTER: ${{ github.event.inputs.tenant_name }}
  GKE_ZONE: ${{ github.event.inputs.zone }}
  TF_PLAN_BUCKET: trabantparking-stage-terraform-plans
  TF_PLAN_FILE: terraform.tfstate
  BUCKET_TF_STATE: trabantparking-stage-terraform-plans/terraform.tfstate

jobs:
  deploy:
    name: Full Cluster Creation
    runs-on: ubuntu-latest

    steps:
      
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Google Cloud SDK
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GOOGLE_CREDENTIALS_STAGE }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}

    - name: Install Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Configure Docker for GCP Artifact Registry
      run: |
        gcloud auth configure-docker europe-west1-docker.pkg.dev

    - name: Print input values
      run: |
        echo "tenant_name: ${{ github.event.inputs.tenant_name }}"
        echo "region: ${{ github.event.inputs.region }}"
        echo "zone: ${{ github.event.inputs.zone }}"

 
    - name: Deploy Cloud Function
      id: deploy_cloud_function
      uses: google-github-actions/deploy-cloud-functions@v3
      timeout-minutes: 10
      with:
        name: asyncreport${{ env.GKE_CLUSTER }}
        source_dir: microservices/cloud-function
        runtime: nodejs20
        entry_point: dailyReport${{ env.GKE_CLUSTER }}${{ env.GKE_CLUSTER }}
        region: ${{ github.event.inputs.region }}
        environment_variables: |-
          CLUSTER_NAME=${{ env.GKE_CLUSTER }}
          TENANT_NAME=${{ env.GKE_CLUSTER }}


    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: "1.5.7"

    - name: Initialize Terraform
      run: |
        terraform init
      working-directory: cloud/terraform

    - name: Check if Cluster Exists
      id: check_cluster
      run: |
        if gcloud container clusters describe ${{ env.GKE_CLUSTER }} --region ${{ env.GKE_ZONE }}; then
          echo "Cluster exists"
          echo "CLUSTER_EXISTS=true" >> $GITHUB_ENV
        else
          echo "Cluster does not exist"
          echo "CLUSTER_EXISTS=false" >> $GITHUB_ENV
        fi

    - name: Import Existing Cluster
      if: ${{ env.CLUSTER_EXISTS == 'true' }}
      run: |
        echo ${{ env.PROJECT_ID }}
        terraform import google_container_cluster.gke projects/${{ env.PROJECT_ID }}/locations/${{ env.GKE_ZONE }}/clusters/${{ env.GKE_CLUSTER }}
      working-directory: cloud/terraform

    - name: Cluster Name
      run: |
        echo ${{ env.GKE_CLUSTER }}

    - name: Check if bucket exists
      run: |
        BUCKET_NAME="trabantparking-stage-terraform-plans"
        if gcloud storage buckets describe gs://$BUCKET_NAME --project=trabantparking-stage >/dev/null 2>&1; then
          echo "BUCKET_EXISTS=true" >> $GITHUB_ENV
        else
          echo "BUCKET_EXISTS=false" >> $GITHUB_ENV
        fi

    - name: Import Bucket
      if: ${{ env.BUCKET_EXISTS == 'true' }}
      run: |
        terraform import google_storage_bucket.default trabantparking-stage-terraform-plans
      working-directory: cloud/terraform  

    - name: Check if Firestore Database exists
      run: |
        if [ -n "projects/trabantparking-stage/databases/${{ env.GKE_CLUSTER }}" ] && gcloud firestore databases list --format="value(name)" | grep -q "${{ env.GKE_CLUSTER }}"; then
          echo "FIRESTORE_EXISTS=true" >> $GITHUB_ENV
        else
          echo "FIRESTORE_EXISTS=false" >> $GITHUB_ENV
        fi

   
    - name: Import Firestore Database
      if: ${{ env.FIRESTORE_EXISTS == 'true' }}
      run: |
        terraform import google_firestore_database.firestore projects/${{ env.PROJECT_ID }}/databases/${{ env.GKE_CLUSTER }}
      working-directory: cloud/terraform

    - name: Terraform Plan
      run: |
        terraform import google_service_account.default projects/trabantparking-stage/serviceAccounts/continuous-integrator@trabantparking-stage.iam.gserviceaccount.com
        terraform plan -var="cluster_name=${{ env.GKE_CLUSTER }}" -var="region=${{ github.event.inputs.region }}" -var="zone=${{ github.event.inputs.zone }}" -out=tfplan

        terraform show -json tfplan > plan.json
        gcloud storage cp tfplan gs://${{ env.TF_PLAN_BUCKET }}/${{ env.GKE_CLUSTER }}.tfstate
      working-directory: cloud/terraform


    - name: Terraform Apply
      run: |
          if [ -f "tfplan" ]; then
            terraform apply tfplan
          else
            terraform apply -auto-approve
          fi
      working-directory: cloud/terraform

    - name: Migrate Terraform State to Google Cloud Storage
      run: |
        terraform init -migrate-state

#DO CONTAINER THINGS
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        fetch-depth: 2

    - name: Get latest tag
      id: get_latest_tag
      run: |
        git fetch --tags
        LATEST_TAG=$(git describe --tags $(git rev-list --tags --max-count=1))   
        echo "LATEST_TAG=${LATEST_TAG}" >> $GITHUB_ENV

    - name: Set up Google Cloud SDK
      uses: google-github-actions/auth@v2
      with:
        credentials_json: '${{ secrets.GOOGLE_CREDENTIALS_STAGE }}'

    - name: Authenticate Docker with Google Cloud
      run: |
        gcloud auth configure-docker europe-west1-docker.pkg.dev

      # Frontend
    - name: Build and Push Frontend
      run: |
        docker build \
          --build-arg REACT_APP_BACKEND_URL=/api \
          --build-arg AUTH_API_KEY=${{ secrets.AUTH_API_KEY_STAGE }} \
          -t frontend-server:${{ env.LATEST_TAG }} \
          -f frontend/Dockerfile ./frontend
        docker tag frontend-server:${{ env.LATEST_TAG }} \
          europe-west1-docker.pkg.dev/trabantparking-stage/docker-repo/frontend-server:${{ env.LATEST_TAG }}
        docker push \
          europe-west1-docker.pkg.dev/trabantparking-stage/docker-repo/frontend-server:${{ env.LATEST_TAG }}
      working-directory: microservices

    # Backend
    - name: Build and Push Backend
      run: |
        docker build \
          --build-arg BUCKET_ENV=_stage \
          -t backend-server:latest \
          -f backend/Dockerfile ./backend
        docker tag backend-server:latest \
          europe-west1-docker.pkg.dev/trabantparking-stage/docker-repo/backend-server:${{ env.LATEST_TAG }}
        docker push \
          europe-west1-docker.pkg.dev/trabantparking-stage/docker-repo/backend-server:${{ env.LATEST_TAG }}
      working-directory: microservices

    # Backend E-Charging
    - name: Build and Push Backend E-Charging
      run: |
        docker build \
          --build-arg AUTH_API_KEY=${{ secrets.AUTH_API_KEY_STAGE }} \
          --build-arg PROJECT_ID=trabantparking-stage \
          -t backend-echarging-server:${{ env.LATEST_TAG }} \
          -f backend-echarging/Dockerfile ./backend-echarging
        docker tag backend-echarging-server:${{ env.LATEST_TAG }} \
          europe-west1-docker.pkg.dev/trabantparking-stage/docker-repo/backend-echarging-server:${{ env.LATEST_TAG }}
        docker push \
          europe-west1-docker.pkg.dev/trabantparking-stage/docker-repo/backend-echarging-server:${{ env.LATEST_TAG }}
      working-directory: microservices

    # Backend Reporting
    - name: Build and Push Backend Reporting
      run: |
        docker build \
          --build-arg AUTH_API_KEY=${{ secrets.AUTH_API_KEY_STAGE }} \
          --build-arg PROJECT_ID=trabantparking-stage \
          -t backend-reporting-server:${{ env.LATEST_TAG }} \
          -f backend-reporting/Dockerfile ./backend-reporting
        docker tag backend-reporting-server:${{ env.LATEST_TAG }} \
          europe-west1-docker.pkg.dev/trabantparking-stage/docker-repo/backend-reporting-server:${{ env.LATEST_TAG }}
        docker push \
          europe-west1-docker.pkg.dev/trabantparking-stage/docker-repo/backend-reporting-server:${{ env.LATEST_TAG }}
      working-directory: microservices

    # Backend Parking
    - name: Build and Push Backend Parking
      run: |
        docker build \
          --build-arg AUTH_API_KEY=${{ secrets.AUTH_API_KEY_STAGE }} \
          --build-arg PROJECT_ID=trabantparking-stage \
          -t backend-parking-server:${{ env.LATEST_TAG }} \
          -f backend-parking/Dockerfile ./backend-parking
        docker tag backend-parking-server:${{ env.LATEST_TAG }} \
          europe-west1-docker.pkg.dev/trabantparking-stage/docker-repo/backend-parking-server:${{ env.LATEST_TAG }}
        docker push \
          europe-west1-docker.pkg.dev/trabantparking-stage/docker-repo/backend-parking-server:${{ env.LATEST_TAG }}
      working-directory: microservices

# APPLY HELM
    - name: Install GKE Auth Plugin
      run: |
        echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
        curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
        sudo apt-get update
        sudo apt-get install -y google-cloud-sdk-gke-gcloud-auth-plugin

    - name: Get GKE Credentials
      run: |
        gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} --region ${{ env.GKE_ZONE }}
        
    - name: Check if Firebase Credentials Secret Exists
      run: |
        if kubectl get secret firebase-credentials -n default; then
          echo "Firebase credentials secret already exists"
          echo "SECRET_EXISTS=true" >> $GITHUB_ENV
        else
         echo "Firebase credentials secret does not exist"
         echo "SECRET_EXISTS=false" >> $GITHUB_ENV
        fi

    - name: Create Firebase Credentials Secret
      if: env.SECRET_EXISTS == 'false'
      run: |
       echo "${{ secrets.GOOGLE_CREDENTIALS_STAGE }}" > firebase-credentials.json
       kubectl create secret generic firebase-credentials --from-file=firebase-credentials.json -n default

    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: 'v3.12.3'

    - name: Install NGINX Ingress Controller
      run: |
        helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
        helm repo update
        helm upgrade --install my-nginx-ingress ingress-nginx/ingress-nginx \
          --set controller.admissionWebhooks.enabled=true \
          --set controller.resources.requests.cpu=50m \
          --set controller.resources.requests.memory=64Mi

    - name: Wait for 10 seconds
      run: sleep 10
    
    - name: Deploy Helm Chart
      run: |
        helm upgrade --install trabant-app ./cloud/yamls/helm-chart --namespace default --create-namespace --set global.tag=${{ env.LATEST_TAG }}

    - name: Verify Ingress IP
      continue-on-error: true
      run: |
        echo "Waiting for ingress to be ready..."
        MAX_RETRIES=30  # Set the maximum number of retries (adjustable)
        RETRY_INTERVAL=20  # Interval between retries in seconds
        RETRIES=0
        while true; do
          # Versuche, die Ingress-IP abzurufen, und fange Fehler ab
          INGRESS_IP=$(kubectl get ingress api-gateway-ingress -n default -o=jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "")

          if [ ! -z "$INGRESS_IP" ]; then
            echo "Ingress IP Address: $INGRESS_IP"
            echo "INGRESS_IP=$INGRESS_IP" >> $GITHUB_ENV
            break
          fi

          if [ $RETRIES -ge $MAX_RETRIES ]; then
            echo "Timed out waiting for ingress IP."
            exit 1
          fi

          RETRIES=$((RETRIES + 1))
          echo "Retry $RETRIES/$MAX_RETRIES: Ingress IP not ready yet. Retrying in $RETRY_INTERVAL seconds..."
          sleep $RETRY_INTERVAL
          done
    - name: Create DNS Subdomain Record for Tenant
      run: |
        echo "Creating DNS record for tenant ${TENANT_NAME}..."
        SUBDOMAIN="${{ env.GKE_CLUSTER }}.trabantparking.ninja"

        # Überprüfen, ob der DNS-Record bereits existiert
        existing_record=$(gcloud dns record-sets list --zone=trabant --name=${SUBDOMAIN} --type=A --format="value(name)")

        if [ -z "$existing_record" ]; then
          echo "DNS record does not exist, creating a new one..."
          
          # Start DNS transaction
          gcloud dns record-sets transaction start --zone=trabant
          gcloud dns record-sets transaction add ${INGRESS_IP} --name=${SUBDOMAIN} --ttl=5 --type=A --zone=trabant
          gcloud dns record-sets transaction execute --zone=trabant
        else
          echo "DNS record already exists for ${SUBDOMAIN}, skipping creation."
        fi

    # - name: migrate data from plan to plan
    #   if: ${{ env.CLUSTER_EXISTS == 'true' && env.SECRET_EXISTS == 'true' }}
    #   run: |
    #     if firebase database:get /${{env.GKE_CLUSTER}} --project=trabantparking-stage > ${{env.GKE_CLUSTER}}-data.json; then
    #       echo "Database '${{env.GKE_CLUSTER}}' exists. Exporting data..."
    #       # Import data into 'free'
    #       firebase database:set /migrate ${{env.GKE_CLUSTER}}-data.json --project=trabantparking-stage
    #       echo "Data migrated to 'migrate'."
    #     else
    #       echo "Database '${{env.GKE_CLUSTER}}' does not exist."
    #     fi


    - name: Verify Deployment
      run: |
        kubectl get pods -n trabi-app
        kubectl get services -n trabi-app